// *************************************
//
//   Common Mixins
//
// *************************************

// -------------------------------------
//   Remove inline spacing
//   (only use in wrapper)
// -------------------------------------

@mixin remove-spacing($_children, $_fontSize: $font-size-base) {
  font-size: 0;
  #{$_children} {
    font-size: $_fontSize;
  }
}


// -------------------------------------
//   Clearfix
// -------------------------------------

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}


// -------------------------------------
//   inline Vertical
// -------------------------------------

@mixin inline-vertical() {
  &:before {
    content: "";
    display: inline-block;
    width: 0;
    height: 100%;
    vertical-align: middle;
  }
  > * {
    display: inline-block;
    vertical-align: middle;
  }
}


// -------------------------------------
//  Text-overflow Ellipsis
// -------------------------------------

@mixin overflow-ellipsis($_width: 100%) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  width: $_width;
}


// -------------------------------------
//   Hide Scrollbar
// -------------------------------------

@mixin hide-scrollbar {
  -ms-overflow-style: none;
  &::-webkit-scrollbar {
    width: 0 !important;
  }
}


// -------------------------------------
//   Placeholder Text
// -------------------------------------

@mixin placeholder($color: $c-dark, $text-indent: 0) {
  &::-moz-placeholder { // Firefox 19+
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
    // Safari placeholder margin issue
    text-indent: $text-indent;
  }
}


// -------------------------------------
//   z-index
// -------------------------------------

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
@function z($layers...) {
  @if not map-has-nested-keys($z-layers, $layers...) {
    @warn "No layer found for `#{inspect($layers...)}` in $z-layers map. Property omitted.";
  }
  @return map-deep-get($z-layers, $layers...);
}


// -------------------------------------
//   Unite (Multiple Classes)
//   REF: http://stackoverflow.com/questions/9083614/sass-multiple-class-selector-from-a-variable
// -------------------------------------

@function unite($list, $glue: ", ") {
  @if length($list)==1 {
    @return $list;
  }
  @else {
    $_string: "";
    @each $item in $list {
      @if $_string !="" {
        $_string: $_string + $glue;
      }
      $_string: $_string + $item;
    }
    @return $_string;
  }
}


// -------------------------------------
//   Breakpoint - media queries
// -------------------------------------

@mixin bp($_bp: false, $_bp_max: false, $_bp_min: false) {
  @if($_bp_max) {
    @if(map-has-key($bp, $_bp)) {
      $_bp: #{map-get($bp, $_bp)};
    }
    @if(map-has-key($bp, $_bp_max)) {
      $_bp_max: #{map-get($bp, $_bp_max)};
    }
    @media (min-width: $_bp) and (max-width: $_bp_max) {
      @content;
    }
  }
  @else if($_bp) {
    @if(map-has-key($bp, $_bp)) {
      $_bp: #{map-get($bp, $_bp)};
    }
    @media (max-width: $_bp) {
      @content;
    }
  }
  @else if($_bp_min) {
    @if(map-has-key($bp, $_bp_min)) {
      $_bp_min: #{map-get($bp, $_bp_min)};
    }
    @media (min-width: $_bp_min) {
      @content;
    }
  }
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
        + "Please make sure it is defined in `$bp` map.";
  }
}


// -------------------------------------
//   Border Radius Position Mixins
// -------------------------------------

// Top border radius
@mixin border-top-radius($radius) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

// Bottom border radius
@mixin border-bottom-radius($radius) {
  border-bottom-left-radius: $radius;
  border-bottom-right-radius: $radius;
}

// Left border radius
@mixin border-left-radius($radius) {
  border-bottom-left-radius: $radius;
  border-top-left-radius: $radius;
}

// Right border radius
@mixin border-right-radius($radius) {
  border-bottom-right-radius: $radius;
  border-top-right-radius: $radius;
}


// -------------------------------------
//   Heading Text
// -------------------------------------

@mixin heading-text($_font-size, $_margin-vertical, $_font-weight: normal) {
  font-size: $_font-size;
  font-weight: $_font-weight;
  margin-top: $_margin-vertical;
  margin-bottom: $_margin-vertical;
}


// -------------------------------------
//   Strip unit
//   Remove the unit of a variable
//   @param {Number} $number - Number to remove unit from
//   @return {Number} - Unitless number
// -------------------------------------

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

